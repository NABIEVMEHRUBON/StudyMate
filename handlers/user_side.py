from aiogram import F, Router # type: ignore
from aiogram.enums import ParseMode # type: ignore
from aiogram.exceptions import TelegramAPIError # type: ignore
from aiogram.filters import Command # type: ignore
from aiogram.fsm.context import FSMContext # type: ignore
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, ReplyKeyboardRemove, Union # type: ignore
from aiogram.utils.keyboard import InlineKeyboardBuilder # type: ignore

import html

from create_bot import ADMINS, bot
from data_base import sqlite_db
from keyboards import inline_kb, usually_kb

from keyboards.usually_kb import  user_main_menu
from .states import AskQuestionStates, AdminScheduleStates, SelectGroupStates, StartStates

router = Router()




#=========================START=================================
@router.message(Command("start"))
async def cmd_start(message: Message):
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n\n"
        "üìå –ß—Ç–æ —É–º–µ—é:\n"
        "‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Äî –ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚Äî –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n\n"
        "‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã: /help\n"
        "üëá –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:",
        reply_markup=user_main_menu()
    )

@router.callback_query(F.data == "user_schedule")
async def handle_schedule(callback: CallbackQuery):
    await callback.answer()

    group = await sqlite_db.get_user_group(callback.from_user.id)
    if not group or group == "no_group":
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="select_group"))
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É:", reply_markup=builder.as_markup())
        return

    schedule = await sqlite_db.get_group(group)
    if not schedule or not schedule[0][1]:
        await callback.message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        return

    await callback.message.answer_photo(
        photo=schedule[0][1],
        caption=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group}"
    )
    
        

       
#==========================GROUP=========================================================
@router.message(StartStates.group_name)
async def start_state(message: Message, state: FSMContext):
    all_group_names = [_[0] for _ in await sqlite_db.get_all_groups()]
    if message.text in all_group_names:
        await sqlite_db.change_user_group(message.from_user.id, message.text)
        await message.answer(
            f'–û–∫–µ–π, –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ç–µ–±—è –∫ –≥—Ä—É–ø–ø–µ {message.text}',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            '–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—É, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ–µ —Å –ø–æ–º–æ—â—å—é /select_group',
            reply_markup=ReplyKeyboardRemove()
        )
    await state.clear()


async def select_group_handler(update: Union[Message, CallbackQuery]):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    if isinstance(update, CallbackQuery):
        await update.answer()
        message = update.message
    else:
        message = update
    
    groups = await sqlite_db.get_all_groups()
    if not groups:
        await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
        return
    
    builder = InlineKeyboardBuilder()
    for group in groups:
        builder.button(text=group[0], callback_data=f"set_group_{group[0]}")
    builder.adjust(2)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=builder.as_markup())

@router.message(Command("select_group"))
async def select_group_cmd(message: Message):
    if message.from_user.username not in ADMINS: 
        await message.delete()
    await select_group_handler(message)

@router.callback_query(F.data == "select_group")
async def select_group_btn(callback: CallbackQuery):
    await select_group_handler(callback)

@router.callback_query(F.data.startswith("set_group_"))
async def set_group_handler(callback: CallbackQuery):
    group_name = callback.data.split('_')[-1]
    await sqlite_db.change_user_group(callback.from_user.id, group_name)
    await callback.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –≤—ã–±—Ä–∞–Ω–∞!", show_alert=True)
    
    await callback.message.delete()

@router.message(SelectGroupStates.group_name)
async def select_group_state(message: Message, state: FSMContext):
    all_group_names = [_[0] for _ in await sqlite_db.get_all_groups()]
    if message.text in all_group_names:
        await sqlite_db.change_user_group(message.from_user.id, message.text)
        await message.answer(
            '–ì—Ä—É–ø–ø–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            '–ì—Ä—É–ø–ø—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–±—Ä–∞–ª–∏, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            reply_markup=ReplyKeyboardRemove()
        )
    

@router.message(Command("delete_me_from_group"))
async def delete_from_group(message: Message):
    await message.delete()
    await sqlite_db.change_user_group(message.from_user.id, None)
    await message.answer('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞')


#==========================NEWS==========================================
@router.callback_query(F.data == "user_news")
async def show_news(callback: CallbackQuery):
    await callback.answer()
    news = await sqlite_db.get_news()
    if not news:
        return await callback.answer("üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", show_alert=True)

    for item in news[:3]:
        caption = (
            f"üì∞ <b>{item[1]}</b>\n\n"
            f"{item[2][:200]}{'...' if len(item[2]) > 200 else ''}\n"
            f"{item[4].strftime('%d.%m.%Y') if len(item) > 4 else ''}"
        )
        await callback.message.answer_photo(
            photo=item[3],
            caption=caption,
            parse_mode="HTML"
        )

@router.message(Command("news"))
async def news_command(message: Message):
    await message.delete()
    news = await sqlite_db.get_news()
    if message.chat.username not in ADMINS:
        for item in news[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
            try:
                
                await message.answer_photo(
                    photo=item[3],
                    caption=f"–ù–û–í–û–°–¢–¨\n\n{item[1]}\n\n{item[2]}"
                )
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
    else:
        for item in news:
            try:
                await message.answer_photo(
                    photo=item[3],
                    caption=f"–ù–û–í–û–°–¢–¨\n\n{item[1]}\n\n{item[2]}"
                )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–∏: {e}")


#===========================================QUESTIONS===============================================================
async def ask_question_handler(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
    if isinstance(message_or_callback, CallbackQuery):
        await message_or_callback.answer()
        message = message_or_callback.message
    else:
        message = message_or_callback
    
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n (–í–∞—à –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á—ë—Ç–∫–æ –∏ —è—Å–Ω–æ.):")
    await state.set_state(AskQuestionStates.get_question)

@router.message(Command("ask_question"))
async def ask_question_command(message: Message, state: FSMContext):
    
    await ask_question_handler(message, state)


@router.callback_query(F.data == "user_question")
async def ask_question_btn(callback: CallbackQuery, state: FSMContext):
    await ask_question_handler(callback, state)



@router.message(AskQuestionStates.get_question)
async def get_question_state(message: Message, state: FSMContext):
    if len(message.text.split()) <= 1:
        return await message.answer("‚ùó–í–æ–ø—Ä–æ—Å –Ω–µ–∑–∞–¥–∞–Ω\n\n (–í–∞—à –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –¥–≤—É—Ö –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —á—ë—Ç–∫–æ –∏ —è—Å–Ω–æ.)")
    await state.update_data({
        'user_id': message.from_user.id,
        'question': message.text,
        'nick': message.from_user.username
    })
    data = await state.get_data()
    await sqlite_db.add_question(data)
    await message.answer("–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
    await state.clear()


async def add_proxy_data(state: FSMContext, data: dict):
    await state.update_data(data)

#=============================================ID=======================================================
@router.message(Command("id"))
async def get_group_id(message: Message):
    await message.delete()
    await message.answer(str(message.chat.id))


#============================================SCHEDULE==================================================
async def schedule_handler(update: Union[Message, CallbackQuery], state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    message = update if isinstance(update, Message) else update.message
    
    is_admin = message.from_user.username in ADMINS if message.from_user.username else False
    
    if not is_admin:
        user_group = await sqlite_db.get_user_group(message.from_user.id)
        if not user_group or user_group == "no_group":
            await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /select_group")
            return
            
        group_data = await sqlite_db.get_group(user_group)
        if not group_data or not group_data[0][1]:
            await message.answer("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            return
            
        await message.answer_photo(
            photo=group_data[0][1],
            caption=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {user_group}"
        )
    else:
        all_groups = await sqlite_db.get_all_groups()
        if not all_groups:
            await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø")
            return
            
        builder = InlineKeyboardBuilder()
        for group in all_groups:
            builder.button(text=group[0], callback_data=f"schedule_{group[0]}")
        builder.adjust(2)
        
        await message.answer(
            "üëë –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=builder.as_markup()
        )

@router.message(Command("schedule", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
async def schedule_command(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        await message.delete()
    await schedule_handler(message, state)


@router.callback_query(F.data.startswith("schedule_"))
async def process_admin_group_selection(callback: CallbackQuery):
    group_name = callback.data.split("_")[1]
    group_data = await sqlite_db.get_group(group_name)
    
    if not group_data or not group_data[0][1]:
        await callback.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ", show_alert=True)

    else:
        await callback.answer()
        await callback.message.answer_photo(
            photo=group_data[0][1],
            caption=f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {group_name}"
        )
