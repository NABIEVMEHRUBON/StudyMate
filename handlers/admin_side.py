from aiogram import Router, F # type: ignore
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove # type: ignore
from aiogram.filters import Command # type: ignore
from aiogram.fsm.context import FSMContext # type: ignore
from aiogram.enums import ParseMode # type: ignore
from aiogram.utils.keyboard import InlineKeyboardBuilder # type: ignore
from aiogram.utils.markdown import hbold, hitalic # type: ignore
from aiogram.enums import ParseMode # type: ignore
from aiogram.exceptions import TelegramAPIError # type: ignore
from keyboards import usually_kb, inline_kb
from data_base import sqlite_db
from .states import (
    NewsStates, 
    CreateGroupStates, 
    DeleteGroupStates, 
    ScheduleStates, 
    DeleteScheduleStates, 
    AnswerTheQuestion,
    AnswerStates
)
from create_bot import ADMINS 
from datetime import datetime
from handlers.sending_messages import sending_schedule  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç


from config import is_admin_sync, get_admins_sync, add_admin_sync, remove_admin_sync, count_admins_sync
import asyncio


admin_router = Router()

# –ì—Ä—É–ø–ø—ã
@admin_router.message(Command("create_group"))
async def create_group_command(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await message.answer("üì• –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:")
    await state.set_state(CreateGroupStates.group_name)


@admin_router.message(CreateGroupStates.group_name)
async def create_group_state(message: Message, state: FSMContext):
    try:
        await sqlite_db.add_group(message.text, message)
        await message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
    await state.clear()


@admin_router.message(Command("delete_group"))
async def delete_group_command(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    groups = await sqlite_db.get_all_groups()
    await message.answer(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=usually_kb.group_keyboard(groups)
    )
    await state.set_state(DeleteGroupStates.group_name)


@admin_router.message(DeleteGroupStates.group_name)
async def delete_group_state(message: Message, state: FSMContext):
    group_names = [name[0] for name in await sqlite_db.get_all_groups()]
    if message.text in group_names:
        await sqlite_db.delete_group(message.text)
        await message.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()


@admin_router.message(Command("groups"))
async def list_groups(message: Message):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    groups = await sqlite_db.get_all_groups()
    if not groups:
        return await message.answer("üì≠ –ì—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")

    group_list = "\n".join([f"‚Ä¢ {g[0]}" for g in groups])
    await message.answer(f"üìö <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø:</b>\n\n{group_list}", parse_mode=ParseMode.HTML)



# –ù–æ–≤–æ—Å—Ç–∏
@admin_router.message(Command("create_news"))
async def create_news(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(NewsStates.title)


@admin_router.message(NewsStates.title)
async def state_title_news(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(NewsStates.content)


@admin_router.message(NewsStates.content)
async def state_content_news(message: Message, state: FSMContext):
    await state.update_data(content=message.text)
    await message.answer("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏:")
    await state.set_state(NewsStates.image)


@admin_router.message(NewsStates.image, F.photo)
async def state_image_news(message: Message, state: FSMContext):
    data = await state.get_data()
    data['image'] = message.photo[-1].file_id
    await sqlite_db.add_news(data)
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    try:
        users = await sqlite_db.get_all_users()
        print(users)
        for user in users:
            user_id = user[0]
            try:
                
                await message.bot.send_photo(
                    chat_id=user_id,
                    photo=data['image'],
                    caption=f"<b>{data['title']}</b>\n\n{data['content']}",
                    parse_mode=ParseMode.HTML
                )
            except TelegramAPIError:
                continue
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

    await state.clear()


@admin_router.message(Command("delete_news"))
async def delete_news(message: Message):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    news = await sqlite_db.get_news()
    if not news:
        return await message.answer("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")

    for item in news:
        await message.answer_photo(
            photo=item[3],
            caption=f"<b>{item[1]}</b>\n\n{item[2]}",
            reply_markup=inline_kb.create_delete_news_keyboard(str(item[0])),
            parse_mode=ParseMode.HTML
        )


@admin_router.callback_query(F.data.startswith("delete_news_"))
async def process_delete_news(callback: CallbackQuery):
    news_date = callback.data.split("_")[2]
    await sqlite_db.delete_news(news_date)
    await callback.message.delete()
    await callback.answer("üóë –ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@admin_router.message(Command("create_schedule"))
async def create_schedule(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    groups = await sqlite_db.get_all_groups()
    if not groups:
        return await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ /create_group")

    await message.answer(
        "üóì –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=usually_kb.group_keyboard(groups)
    )
    await state.set_state(ScheduleStates.select_group)


@admin_router.message(ScheduleStates.select_group)
async def state_select_group_schedule(message: Message, state: FSMContext):
    all_groups = [name[0] for name in await sqlite_db.get_all_groups()]
    if message.text in all_groups:
        await state.update_data(group=message.text)
        await message.answer("üì§ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ScheduleStates.image)
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()


@admin_router.message(ScheduleStates.image, F.photo)
async def state_image_schedule(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        if 'group' not in data:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            await state.clear()
            return

        data['image'] = message.photo[-1].file_id
        await sqlite_db.create_schedule(data)

        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        await sending_schedule(data['group'])
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()


@admin_router.message(Command("delete_schedule"))
async def delete_schedule(message: Message, state: FSMContext):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    groups = await sqlite_db.get_all_groups()
    await message.answer(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=usually_kb.group_keyboard(groups)
    )
    await state.set_state(DeleteScheduleStates.select_group)


@admin_router.message(DeleteScheduleStates.select_group)
async def state_delete_schedule(message: Message, state: FSMContext):
    all_groups = [name[0] for name in await sqlite_db.get_all_groups()]
    if message.text in all_groups:
        await sqlite_db.delete_schedule(message.text)
        await message.answer(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã {message.text} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()


# –í–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.message(Command("view_questions"))
async def view_questions(message: Message):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    questions = await sqlite_db.get_unanswered_questions_with_groups()
    if not questions:
        return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    flag = 1
    for q in questions:
        if len(q[2].split()) > 1:
            flag = 0
            question_text = (
                f"üìå <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</b>\n"
                f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> @{q[3]}\n"
                f"üè´ <b>–ì—Ä—É–ø–ø–∞:</b> {q[4] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                f"üìù <b>–í–æ–ø—Ä–æ—Å:</b>\n{q[2]}"
            )
            await message.answer(
                question_text,
                reply_markup=await inline_kb.create_reply_keyboard(user_id=q[1], question_id=q[0]),
                parse_mode=ParseMode.HTML
            )
    if flag:
        return await message.answer("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@admin_router.callback_query(F.data.startswith("reply_"))
async def process_reply(callback: CallbackQuery, state: FSMContext):
    try:
        parts = callback.data.split('_')
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")

        user_id = int(parts[1])
        question_id = int(parts[2])

        await state.update_data(target_user_id=user_id, question_id=question_id)
        await state.set_state(AnswerStates.waiting_for_answer)

        await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await callback.answer()

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@admin_router.message(AnswerStates.waiting_for_answer)
async def send_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    target_user_id = data['target_user_id']
    question_id = data['question_id']

    try:
        await message.bot.send_message(
            chat_id=target_user_id,
            text=f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
        )
        await sqlite_db.mark_question_as_answered(question_id)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –≤–æ–ø—Ä–æ—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

    await state.clear()




# –ö–æ–º–∞–Ω–¥–∞ /help


@admin_router.message(Command("help"))
async def help_command(message: Message):
    await message.delete()
    is_admin = message.from_user.username in ADMINS

    user_help = """
üìö <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

<b>–û—Å–Ω–æ–≤–Ω–æ–µ:</b>
/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help ‚Äî –°–ø—Ä–∞–≤–∫–∞

<b>–ì—Ä—É–ø–ø–∞:</b>
/select_group ‚Äî –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

<b>–ù–æ–≤–æ—Å—Ç–∏:</b>
/news ‚Äî –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏

<b>–í–æ–ø—Ä–æ—Å:</b>
/ask_question ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

<b>–ü—Ä–æ—Ñ–∏–ª—å:</b>
/id ‚Äî –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID
/delete_me_from_group ‚Äî –ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É
"""

    admin_help = f"""
üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

<b>–û—Å–Ω–æ–≤–Ω–æ–µ:</b>
/start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
/help ‚Äî –ü–æ–º–æ—â—å
/id ‚Äî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:</b>
/add_admin [username] ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
/remove_admin [username] ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
/list_admins ‚Äî –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤

<b>–ì—Ä—É–ø–ø—ã:</b>
/create_group ‚Äî –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
/delete_group ‚Äî –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É
/groups ‚Äî –í—Å–µ –≥—Ä—É–ø–ø—ã

<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>
/create_schedule ‚Äî –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/delete_schedule ‚Äî –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/schedule ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

<b>–ù–æ–≤–æ—Å—Ç–∏:</b>
/create_news ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
/delete_news ‚Äî –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
/news ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π

<b>–í–æ–ø—Ä–æ—Å—ã:</b>
/view_questions ‚Äî –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã
/ask_question ‚Äî –û—Ç–≤–µ—Ç–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—É
"""

    await message.answer(
        (admin_help if is_admin else user_help),
        parse_mode=ParseMode.HTML
    )


@admin_router.message(Command("add_admin"))
async def add_admin_command(message: Message):
    if not message.from_user.username:
        return await message.answer("‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram.")
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_admin [username]")

    new_admin = args[1].lower().replace('@', '')
    await asyncio.to_thread(add_admin_sync, new_admin, message.from_user.username)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")


@admin_router.message(Command("list_admins"))
async def list_admins_command(message: Message):
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    await message.delete()
    admins = await asyncio.to_thread(get_admins_sync)
    text = "üëë <b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n" + "\n".join(f"‚Ä¢ @{a}" for a in admins)
    await message.answer(text, parse_mode=ParseMode.HTML)


@admin_router.message(Command("remove_admin"))
async def remove_admin_command(message: Message):
    if not message.from_user.username:
        return await message.answer("‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram.")
    if message.from_user.username not in ADMINS:
        return await message.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove_admin [username]")

    target = args[1].lower().replace('@', '')
    if target == message.from_user.username.lower():
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")

    if await asyncio.to_thread(count_admins_sync) <= 1:
        return await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

    if not is_admin_sync(target):
        return await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    await asyncio.to_thread(remove_admin_sync, target)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
